#!/sbin/runscript
#
#/***************************************************************************
# *   Copyright (C) 2014,2017 Daniel Mueller                                *
# *                                                                         *
# *   This program is free software: you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation, either version 3 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU General Public License for more details.                          *
# *                                                                         *
# *   You should have received a copy of the GNU General Public License     *
# *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
# ***************************************************************************/
#
# $Header: Establish a reverse SSH tunnel.$


SCRIPT_FILE=/run/${RC_SVCNAME}.sh
COMMAND_FILE=/run/${RC_SVCNAME}-command.sh
PID_FILE=/run/${RC_SVCNAME}.pid
LOG_FILE=/var/log/${RC_SVCNAME}.log
USER=ssh


error() {
  local exit_code=${?}

  eerror "$*"
  return ${exit_code}
}

depend() {
  after dns dhcpcd net
}

check() {
  if [ -z "${SSH_HOST}" ]; then
    msg=$(cat <<EOF
The following variables are required for ${RC_SVCNAME} to work:
SSH_HOST: The SSH host to connect to.

Please define them in ${conf}.
EOF
)
    error "${msg}"
    exit 1
  fi
}

start() {
  check

  local host=${SSH_HOST}

  # Note: for some reasons start-stop-daemon's --user option won't work here.
  #       Probably because the environment stays the same or some ssh alias
  #       issue. Be that as it may, we just switch the user within the script
  #       ourselves. For some reasons (probably the same issue as above...)
  #       --login won't work.
  cat <<EOF > ${COMMAND_FILE}
#!/bin/sh
AUTOSSH_LOGLEVEL=6 AUTOSSH_LOGFILE=${LOG_FILE} AUTOSSH_PIDFILE=${PID_FILE} autossh -M 0 -f ${host} -N -o LogLevel=INFO -- -E ${LOG_FILE}
EOF
  chown ${USER} ${COMMAND_FILE}
  chmod u+x ${COMMAND_FILE}

  cat <<EOF > ${SCRIPT_FILE}
#!/bin/sh
touch ${LOG_FILE}
touch ${PID_FILE}
chown ${USER} ${LOG_FILE}
chown ${USER} ${PID_FILE}

su ${USER} --command="${COMMAND_FILE}"
EOF
  chmod u+x ${SCRIPT_FILE}

  ebegin "Establishing reverse ssh tunnel..."
  start-stop-daemon --start --exec ${SCRIPT_FILE}\
    --pidfile ${PID_FILE} --name ${RC_SVCNAME}
  eend $?

  rm ${SCRIPT_FILE}
  rm ${COMMAND_FILE}
}

stop() {
  ebegin "Tearing down reverse ssh tunnel..."
  kill "$(< ${PID_FILE})"
  # Always successful.
  eend 0
}
